akka {
  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

  actor {
    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }
    kryo {
      # Possibles values for type are: graph or nograph
      # graph supports serialization of object graphs with shared nodes
      # and cyclic references, but this comes at the expense of a small
      # overhead nograph does not support object grpahs with shared nodes,
      # but is usually faster
      type = "ungraph"

      # Possible values for idstrategy are:
      # default, explicit, incremental, automatic
      #
      # default - slowest and produces bigger serialized representation.
      # Contains fully-qualified class names (FQCNs) for each class. Note
      # that selecting this strategy does not work in version 0.3.2, but
      # is available from 0.3.3 onward.
      #
      # explicit - fast and produces compact serialized representation.
      # Requires that all classes that will be serialized are pre-registered
      # using the "mappings" and "classes" sections. To guarantee that both
      # sender and receiver use the same numeric ids for the same classes it
      # is advised to provide exactly the same entries in the "mappings"
      # section.
      #
      # incremental - fast and produces compact serialized representation.
      # Support optional pre-registering of classes using the "mappings"
      # and "classes" sections. If class is not pre-registered, it will be
      # registered dynamically by picking a next available id To guarantee
      # that both sender and receiver use the same numeric ids for the same
      # classes it is advised to pre-register them using at least the "classes" section.
      #
      # automatic -  use the pre-registered classes with fallback to FQCNs
      # Contains fully-qualified class names (FQCNs) for each non pre-registered
      # class in the "mappings" and "classes" sections. This strategy was
      # added in version 0.4.1 and will not work with the previous versions

      idstrategy = "explicit"

      # Define a default queue builder, by default ConcurrentLinkedQueue is used.
      # Create your own queue builder by implementing the trait QueueBuilder,
      # useful for paranoid GC users that want to use JCtools MpmcArrayQueue for example.
      #
      # If you pass a bounded queue make sure its capacity is equal or greater than the
      # maximum concurrent remote dispatcher threads your application will ever have
      # running; failing to do this will have a negative performance impact:
      #
      # custom-queue-builder = "a.b.c.KryoQueueBuilder"

      # Define a default size for byte buffers used during serialization
      buffer-size = 4096

      # The serialization byte buffers are doubled as needed until they
      # exceed max-buffer-size and an exception is thrown. Can be -1
      # for no maximum.
      max-buffer-size = -1

      # If set, akka uses manifests to put a class name
      # of the top-level object into each message
      use-manifests = false

      # If set it will use the UnsafeInput and UnsafeOutput
      # Kyro IO instances. Please note that there is no guarantee
      # for backward/forward compatibility of unsafe serialization.
      # It is also not compatible with the safe-serialized values.
      # The unsafe IO usually creates bugger payloads but is faster
      # for some types, e.g. native arrays.
      use-unsafe = true

      # The transformations that have be done while serialization
      # Supported transformations: compression and encryption
      # accepted values(comma separated if multiple): off | lz4 | deflate | aes
      # Transformations occur in the order they are specified
      post-serialization-transformations = "off"

      # Settings for aes encryption, if included in transformations AES
      # algo mode, key and custom key class can be specified AES algo mode
      # defaults to 'AES/CBC/PKCS5Padding' and key to 'ThisIsASecretKey'.
      # If custom key class is provided, Kryo will use the class specified
      # by a fully qualified class name to get custom AES key. Such a
      # class should define the method 'kryoAESKey'. This key overrides 'key'.
      # If class doesn't contain 'kryoAESKey' method, specified key is used.
      # If this is not present, default key is used
      //    encryption {
      //      aes {
      //        mode = "AES/CBC/PKCS5Padding"
      //        key = j68KkRjq21ykRGAQ
      //        IV-length = 16
      //        custom-key-class = "CustomAESKeyClass"
      //      }
      //    }

      # Log implicitly registered classes. Useful, if you want to know all
      # classes which are serialized. You can then use this information in
      # the mappings and/or classes sections
      implicit-registration-logging = false

      # If enabled, Kryo logs a lot of information about serialization process.
      # Useful for debugging and lowl-level tweaking
      kryo-trace = false

      # If proviced, Kryo uses the class specified by a fully qualified
      # class name to perform a custom initialization of Kryo instances in
      # addition to what is done automatically based on the config file.
      //    kryo-custom-serializer-init = "CustomKryoSerializerInitFQCN"

      # If enabled, allows Kryo to resolve subclasses of registered Types.
      #
      # This is primarily useful when idstrategy is set to "explicit". In this
      # case, all classes to be serialized must be explicitly registered. The
      # problem is that a large number of common Scala and Akka types (such as
      # Map and ActorRef) are actually traits that mask a large number of
      # specialized classes that deal with various situations and optimizations.
      # It isn't straightforward to register all of these, so you can instead
      # register a single supertype, with a serializer that can handle *all* of
      # the subclasses, and the subclasses get serialized with that.
      #
      # Use this with care: you should only rely on this when you are confident
      # that the superclass serializer covers all of the special cases properly.
      resolve-subclasses = false

      # Define mappings from a fully qualified class name to a numeric id.
      # Smaller ids lead to smaller sizes of serialized representations.
      #
      # This section is:
      # - mandatory for idstrategy="explicit"
      # - ignored   for idstrategy="default"
      # - optional  for incremental and automatic
      #
      # The smallest possible id should start at 20 (or even higher), because
      # ids below it are used by Kryo internally e.g. for built-in Java and
      # Scala types
      mappings {
        "sun.reflect.generics.reflectiveObjects.TypeVariableImpl" = 5000,
        "com.haufe.umantis.ds.embdict.messages.WordExistsQuery" = 1000,
        "com.haufe.umantis.ds.embdict.messages.WordVectorQuery" = 1001,
        "com.haufe.umantis.ds.embdict.messages.SynonymQueryWord" = 1002,
        "com.haufe.umantis.ds.embdict.messages.SynonymQueryVector" = 1003,
        "com.haufe.umantis.ds.embdict.messages.SynonymQueryArray" = 1004,
        "com.haufe.umantis.ds.embdict.messages.VectorResponse" = 1005,
        "com.haufe.umantis.ds.embdict.messages.SynonymResponse" = 1006,
        "com.haufe.umantis.ds.embdict.messages.WordsVectorsQuery" = 1007,
        "com.haufe.umantis.ds.embdict.messages.VectorsMapResponse" = 1008,
        "com.haufe.umantis.ds.embdict.messages.AnalogyQuery" = 1009,
        "com.haufe.umantis.ds.embdict.messages.WordVectorQueryWithIndex" = 1010,
        "com.haufe.umantis.ds.embdict.messages.VectorResponseWithIndex" = 1011,
        "org.apache.spark.ml.linalg.DenseVector" = 1050,
        "scala.Option" = 1098,
        "scala.Option$" = 1099,
        "scala.Some" = 1100,
        "scala.None$" = 1101,
        "[F" = 1102,
        "[D" = 1103,
        "[Ljava.lang.String;" = 1104,
        "scala.collection.immutable.ListMap" = 1105,
        "scala.collection.immutable.ListMap$Node" = 1106,
        "scala.collection.immutable.ListMap$EmptyListMap$" = 1107,
        "java.lang.String" = 1199,
        "scala.collection.immutable.HashSet$HashTrieSet" = 1200,
        "scala.collection.immutable.Set$EmptySet$" = 1201,
        "scala.collection.immutable.Set$Set1" = 1202,
        "scala.collection.immutable.Set$Set2" = 1203,
        "scala.collection.immutable.Set$Set3" = 1204,
        "scala.collection.immutable.Set$Set4" = 1205,
        "scala.collection.immutable.HashMap$HashTrieMap" = 1300,
        "scala.collection.immutable.Map$EmptyMap$" = 1301,
        "scala.collection.immutable.Map$Map1" = 1302,
        "scala.collection.immutable.Map$Map2" = 1303,
        "scala.collection.immutable.Map$Map3" = 1304,
        "scala.collection.immutable.Map$Map4" = 1305
      }

      # Define a set of fully qualified class names for
      # classes to be used for serialization.
      # The ids for those classes will be assigned automatically,
      # but respecting the order of declaration in this section
      #
      # This section is ignored for idstrategy="default" and optional for
      # all other.
      //    classes = [
      //      "package3.name3.className3",
      //      "package4.name4.className4"
      //    ]
    }
    serialization-bindings {
      "sun.reflect.generics.reflectiveObjects.TypeVariableImpl" = kryo,
      "com.haufe.umantis.ds.embdict.messages.WordExistsQuery" = kryo,
      "com.haufe.umantis.ds.embdict.messages.WordVectorQuery" = kryo,
      "com.haufe.umantis.ds.embdict.messages.SynonymQueryWord" = kryo,
      "com.haufe.umantis.ds.embdict.messages.SynonymQueryVector" = kryo,
      "com.haufe.umantis.ds.embdict.messages.SynonymQueryArray" = kryo,
      "com.haufe.umantis.ds.embdict.messages.VectorResponse" = kryo,
      "com.haufe.umantis.ds.embdict.messages.SynonymResponse" = kryo,
      "com.haufe.umantis.ds.embdict.messages.WordsVectorsQuery" = kryo,
      "com.haufe.umantis.ds.embdict.messages.VectorsMapResponse" = kryo,
      "com.haufe.umantis.ds.embdict.messages.AnalogyQuery" = kryo,
      "com.haufe.umantis.ds.embdict.messages.WordVectorQueryWithIndex" = kryo,
      "com.haufe.umantis.ds.embdict.messages.VectorResponseWithIndex" = kryo,
      "org.apache.spark.ml.linalg.DenseVector" = kryo,
      "scala.Option" = kryo,
      "scala.Option$" = kryo,
      "scala.Some" = kryo,
      "scala.None$" = kryo,
      "[F" = kryo,
      "[D" = kryo,
      "[Ljava.lang.String;" = kryo,
      "scala.collection.immutable.ListMap" = kryo,
      "scala.collection.immutable.ListMap$Node" = kryo,
      "scala.collection.immutable.ListMap$EmptyListMap$" = kryo,
      "java.lang.String" = kryo,
      "scala.collection.immutable.HashSet$HashTrieSet" = kryo,
      "scala.collection.immutable.Set$EmptySet$" = kryo,
      "scala.collection.immutable.Set$Set1" = kryo,
      "scala.collection.immutable.Set$Set2" = kryo,
      "scala.collection.immutable.Set$Set3" = kryo,
      "scala.collection.immutable.Set$Set4" = kryo,
      "scala.collection.immutable.HashMap$HashTrieMap" = kryo,
      "scala.collection.immutable.Map$EmptyMap$" = kryo,
      "scala.collection.immutable.Map$Map1" = kryo,
      "scala.collection.immutable.Map$Map2" = kryo,
      "scala.collection.immutable.Map$Map3" = kryo,
      "scala.collection.immutable.Map$Map4" = kryo,
      "java.io.Serializable" = kryo
    }
  }
}